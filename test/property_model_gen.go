// Code generated by goctl. DO NOT EDIT.

package test

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	propertyFieldNames          = builder.RawFieldNames(&Property{})
	propertyRows                = strings.Join(propertyFieldNames, ",")
	propertyRowsExpectAutoSet   = strings.Join(stringx.Remove(propertyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	propertyRowsWithPlaceHolder = strings.Join(stringx.Remove(propertyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	propertyModel interface {
		Insert(ctx context.Context, data *Property) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Property, error)
		Update(ctx context.Context, data *Property) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPropertyModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Property struct {
		Id          int64     `db:"id"`          // id
		SourceId    int64     `db:"source_id"`   // 类型 ID
		ColumnName  string    `db:"column_name"` // 字段名
		ShowName    string    `db:"show_name"`   // 展示字段名
		Description string    `db:"description"` // 描述
		IsDeleted   bool      `db:"is_deleted"`  // 是否删除
		CreateTime  time.Time `db:"create_time"` // 创建时间
		UpdateTime  time.Time `db:"update_time"` // 更新时间
	}
)

func newPropertyModel(conn sqlx.SqlConn) *defaultPropertyModel {
	return &defaultPropertyModel{
		conn:  conn,
		table: "`property`",
	}
}

func (m *defaultPropertyModel) withSession(session sqlx.Session) *defaultPropertyModel {
	return &defaultPropertyModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`property`",
	}
}

func (m *defaultPropertyModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPropertyModel) FindOne(ctx context.Context, id int64) (*Property, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", propertyRows, m.table)
	var resp Property
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPropertyModel) Insert(ctx context.Context, data *Property) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, propertyRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.SourceId, data.ColumnName, data.ShowName, data.Description, data.IsDeleted)
	return ret, err
}

func (m *defaultPropertyModel) Update(ctx context.Context, data *Property) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, propertyRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.SourceId, data.ColumnName, data.ShowName, data.Description, data.IsDeleted, data.Id)
	return err
}

func (m *defaultPropertyModel) TableName() string {
	return m.table
}
