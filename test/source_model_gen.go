// Code generated by goctl. DO NOT EDIT.

package test

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sourceFieldNames          = builder.RawFieldNames(&Source{})
	sourceRows                = strings.Join(sourceFieldNames, ",")
	sourceRowsExpectAutoSet   = strings.Join(stringx.Remove(sourceFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sourceRowsWithPlaceHolder = strings.Join(stringx.Remove(sourceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	sourceModel interface {
		Insert(ctx context.Context, data *Source) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Source, error)
		Update(ctx context.Context, data *Source) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSourceModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Source struct {
		Id          int64     `db:"id"`
		Name        string    `db:"name"`
		Type        int64     `db:"type"`
		Description string    `db:"description"`
		IsDeleted   bool      `db:"is_deleted"`
		CreateTime  time.Time `db:"create_time"`
		UpdateTime  time.Time `db:"update_time"`
	}
)

func newSourceModel(conn sqlx.SqlConn) *defaultSourceModel {
	return &defaultSourceModel{
		conn:  conn,
		table: "`source`",
	}
}

func (m *defaultSourceModel) withSession(session sqlx.Session) *defaultSourceModel {
	return &defaultSourceModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`source`",
	}
}

func (m *defaultSourceModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSourceModel) FindOne(ctx context.Context, id int64) (*Source, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sourceRows, m.table)
	var resp Source
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSourceModel) Insert(ctx context.Context, data *Source) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, sourceRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name, data.Type, data.Description, data.IsDeleted)
	return ret, err
}

func (m *defaultSourceModel) Update(ctx context.Context, data *Source) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sourceRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Type, data.Description, data.IsDeleted, data.Id)
	return err
}

func (m *defaultSourceModel) TableName() string {
	return m.table
}
